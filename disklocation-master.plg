<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name             "disklocation">
<!ENTITY author           "Ole-Henrik Jakobsen">
<!ENTITY version          "2025.02.17e">
<!ENTITY launch           "Tools/&name;">
<!ENTITY branch           "master">
<!ENTITY packageURL       "https://github.com/olehj/disklocation/archive/&branch;.zip">
<!ENTITY pluginURL        "https://raw.githubusercontent.com/olehj/&name;/&branch;/&name;-&branch;.plg">
<!ENTITY packagefile      "&name;.&version;.zip">
<!ENTITY pluginLOC        "/boot/config/plugins/&name;">
<!ENTITY emplugLOC        "/usr/local/emhttp/plugins">
<!ENTITY emhttpLOC        "&emplugLOC;/&name;">
<!ENTITY pluginsupportURL "https://forums.unraid.net/topic/77302-plugin-disk-location/">
]>

<PLUGIN  name="&name;"
         author="&author;"
         version="&version;"
         launch="&launch;"
         pluginURL="&pluginURL;"
         icon="server"
         min="6.12.0"
         support="&pluginsupportURL;"
>

<!--
    Copyright 2019-2025, Ole-Henrik Jakobsen

    This file is part of Disk Location for Unraid.

    Disk Location for Unraid is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Disk Location for Unraid is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Disk Location for Unraid.  If not, see <https://www.gnu.org/licenses/>.
-->

<CHANGES>
###2025.02.17e
 - Commit #393 - e) MINOR: Changed old text "Force scan all" to "Force SMART+DB" in Tray Allocations. Remove an unsused section from cronjob.
 - Commit #391 - d) IMPROVEMENT: Added global SSD temp variables. Also fixed a minor variable bug related to SMART status.
 - Commit #389 - c) FEATURE: Added tray layout orientation. Made it possible to modify the dashboard float. Choices: left, right and "stack" (none).
 - Commit #387 - b) BUG: LEDs not always in standby. Altered how they are displayed without losing the ZFS state display priority. Also added separate Disk Location Recovery page under Tools -> Disk Utilities.
 - Commit #385 - a) BUG: Fixed a bug that could cause page to not load. Added System tab to be able to be used as standalone, using this address: http://[serveraddr]/plugins/disklocation/pages/page_system.php

###2025.02.16
 - Commit #383 - BUG: System tab not loading because of array tried to merge with nothing.

###2025.02.15
 - Commit #381 - BUG: SMART detected as failed when the drives are OK
 - Commit #380 - BUG: Unexpected files causes System tab to fail. Added a check for unexpected files and also possibility to delete them via System.
 - Commit #379 - BUG: Disk Tray Layout missing add button has been fixed when a Disk Location is in a clean state.

###2025.02.14
 - Commit #378 - FEATURE: Added a cleanup function in System. If obsolete files are found, it will show a list of files and a button to delete the files shown. These are only files that are not in use.
 - Commit #372 - FEATURE: Seagate SMART vs FARM LOG check in System tab added for checking fraudulent drives.
 - Commit #369 - IMPROVEMENT: Use syslog to detect SMART read events.
 - Commit #365 - FEATURE: Added selected dashboard info to LED "hover" info on Unraid dashboard.
 - Commit #362 - FEATURE: Created a possibility to hide/bypass trays in a group.
 - Commit #361 - IMPROVEMENT: Performance tweak, cleaned up functions and system to improve loading speed.
 - Commit #360 - IMPROVEMENT: Debug function overhauled and made a bit more useful in some cases.
 - Commit #352 - FEATURE: Disk Location plugin time benchmark added, but must be executed manually by entering ?benchmark=1 in the address field. Value is visible in the "System" tab.
 - Commit #351 - FEATURE: Collect SMART errors in an own separate list. Also added possibility to acknowledge all drives at once, but only if plugin is set to allow Unraid config.
 - Commit #349 - MINOR: A few CSS fixes regarding the LEDs. Mostly changes with the dynamic LEDs.
 - Commit #348 - MINOR: Fixed color codes, make sure "empty" color will reset or delete the color of devices. Added a group color for default color for specific groups. Also changed default colors, must be reset manually after the plugin update for current users.
 - Commit #347 - IMPROVEMENT: SAVE button on all Disk Tray Layouts. Deleted the individual Save button on the Disk Tray Layouts, one button to rule them all.. finally.
 - Commit #346 - IMPROVEMENT: SQLite is removed! It will be automatically converted to multiple json files. This will also prevent sudden database corruptions, obviously. But maybe other type of corruptions? :P However, the backup/restore will still work on older SQLite database backups, they will be automagically converted.
 - Commit #345 - MINOR: Installation script cleaned up and fixed some bugs.
 - Commit #344 - IMPROVEMENT: Configuration cleanup. All supported dates can be stored in bulk, if Unraid config edit is enabled.
 - Commit #343 - IMPROVEMENT: Removed most SMART from the DB, running it in memory instead. Some data will be stored for History purposes.
 - Commit #342 - FEATURE: Added a customizable plugin dashboard (not to be confused with Unraid dashboard). Formatting of text and positioning possible.
 - Commit #277 - FEATURE: Added a small simple benchmark for read test (hdparm) with SVG graphs. Can be exported as CSV too.

###2024-2019
 - The complete changelog will be found here: https://github.com/olehj/disklocation/blob/2024-edition/disklocation-2024-edition.plg#L48

###2019.01.22
- Initial Release
</CHANGES>

<!--
############################################
# Plugin Install script
############################################
-->
<FILE Name="/tmp/&name;-install" Run="/bin/bash">
<INLINE>
<!--
#################
# L O G I T
#################
-->
logit()
{
  <!--logger -trc.&name; -plocal7.info -is "$1"-->
  echo ""
  echo "$1"
}

DOWNLOAD_PKG="false"
INSTALL_PKG="false"

if [[ -f "/tmp/disklocation/db.lock" ]]; then
  logit "Existing cronjob is running in the background, retrying every 5 seconds until it finish..."
  while [ -f "/tmp/disklocation/db.lock" ];
  do
    sleep 5
    logit "retrying..."
  done
  logit "Done. Continuing plugin installation..."
fi

logit "Removing old plugin data before installing, if they exists..."
[ -d "&emhttpLOC;" ] &amp;&amp; rm -fR "&emhttpLOC;"
[ -f "/usr/local/bin/smartlocate" ] &amp;&amp; rm -f "/usr/local/bin/smartlocate"
[ -f "/tmp/disklocation/db.lock" ] &amp;&amp; rm -f "/tmp/disklocation/db.lock"
[ -f "/etc/cron.hourly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.hourly/disklocation.sh"
[ -f "/etc/cron.daily/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.daily/disklocation.sh"
[ -f "/etc/cron.weekly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.weekly/disklocation.sh"
[ -f "/etc/cron.monthly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.monthly/disklocation.sh"
[ -f "/etc/cron.monthly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.monthly/disklocation.sh"
[ -f "&pluginLOC;/disklocation.noscan" ] &amp;&amp; rm -f "&pluginLOC;/disklocation.noscan"
[ -f "&pluginLOC;-&branch;/powermode.cron" ] &amp;&amp; rm -f "&pluginLOC;-&branch;/powermode.cron"

logit "Installing plugin..."

<!--# Create plugin folder if needed -->
if [ ! -d "&pluginLOC;" ] ; then
  logit "Creating plugin folder &pluginLOC;"
  mkdir -p "&pluginLOC;"
else
  logit "Plugin folder &pluginLOC; already exists"
fi

<!--# Create plugin-branch folder if needed -->
if [ ! -d "&pluginLOC;-&branch;" ] ; then
  logit "Creating plugin folder &pluginLOC;-&branch;"
  mkdir -p "&pluginLOC;-&branch;"
else
  logit "Plugin folder &pluginLOC;-&branch; already exists"
fi

<!--# Check local package file -->
logit "Checking existing package &pluginLOC;/&packagefile;..."
if [ -f "&pluginLOC;/&packagefile;" ] ; then
  INSTALL_PKG="true"
else
  logit "Latest package does not exist &pluginLOC;/&packagefile;"
  DOWNLOAD_PKG="true"
fi

<!--# Download plugin files -->
if [ "$DOWNLOAD_PKG" == "true" ]; then

  <!--# Save existing packages until new package is downloaded OK -->
  logit "Saving any previous packages from &pluginLOC;"
  mkdir -p "/tmp/&name;-packages"
  TEMPOLD="&pluginLOC;/&name;.*.tar.bz2"
  TEMP="&pluginLOC;/&name;.*.zip"
  mv -f $TEMPOLD $TEMP "/tmp/&name;-packages/"

  logit "Attempting to download plugin package &packageURL;..."
  wget -O &pluginLOC;/&packagefile; --quiet --no-check-certificate --timeout=30 &packageURL;
  if [ ! $? == "0" ] ; then
    logit "Package server down &packageURL; - Plugin cannot install"
    INSTALL_PKG="false"
  else
    if [ ! -f "&pluginLOC;/&packagefile;" ] ; then
      logit "Package download failed &packageURL; - Plugin cannot install"
      INSTALL_PKG="false"
    else
      logit "Package &packagefile; downloaded to &pluginLOC;"
      INSTALL_PKG="true"
    fi
  fi
fi

if [ "$INSTALL_PKG" == "true" ] ; then
  logit "Extracting plugin package..."
  <!--# Remove current existing files -->
  [ -d "&emhttpLOC;" ] &amp;&amp; rm -fR "&emhttpLOC;"
  <!--# Extract files and move correct directory -->
  unzip "&pluginLOC;/&packagefile;" -d /tmp/&name;-packages/
  mv "/tmp/&name;-packages/&name;-&branch;/&name;" "&emplugLOC;/"
  <!--# Edit PAGE file  - Dynamically add version number -->
  if [ -f "&emhttpLOC;/&name;.page" ] ; then
    echo "Version=\"&version;\"" &gt;&gt; "&emhttpLOC;/&name;.page"
    logit "Extraction done."
    EXTRACT_PKG="true"
  else
    logit "Extraction failed."
    EXTRACT_PKG="false"
  fi
fi

if [ "$EXTRACT_PKG" == "true" ] ; then
  logit "Installing files..."
  <!--# Add locate bash script -->
  cat &gt;/usr/local/bin/smartlocate &lt;&lt;EOL
#!/bin/bash

# Simple hack to locate harddrives in hotswap arrays,
#   might not work on all drives or SSD's.
#
# Run: ./smartlocate [address]
#  Ex: ./smartlocate 8:0:0:0
#
# Check addresses available: ls -l /dev/bsg/
#
# Script needs to be interrupted: [CTRL]+[C]
#   or killed: pkill -f smartlocate
#
# Made by &author; &lt;ole@gidderikke.no&gt;

while sleep 0.5; do
  pkill -f smartctl &amp;&gt; /dev/null
  smartctl -x /dev/bsg/\&#36;1 &amp;&gt; /dev/null
done
EOL
  chmod +x /usr/local/bin/smartlocate
  rm -Rf "/tmp/&name;-packages"
  rm -f "/tmp/&name;-install"
  
  php -f &emhttpLOC;/pages/page_system.php backup auto

logit "Configuring..."
<!--# Get sub-configuration-->
  if [ -f "&pluginLOC;/disklocation.conf" ]; then
    DISKLOCATION_CSS_SIGNALS=($(jq -re '.signal_css // empty' &pluginLOC;/disklocation.conf))
  fi
  
  if [ -f "&pluginLOC;/settings.json" ]; then
    DISKLOCATION_CSS_SIGNALS=($(jq -re '.signal_css // empty' &pluginLOC;/settings.json))
  fi

  <!--# Stylesheet configuration-->
  if [ -z $DISKLOCATION_CSS_SIGNALS ]; then
    DISKLOCATION_CSS_SIGNALS="signals.dynamic.css"
  fi

  ln -s &emhttpLOC;/pages/styles/$DISKLOCATION_CSS_SIGNALS &emhttpLOC;/pages/styles/signals.css
  logit "SIGNALS: $DISKLOCATION_CSS_SIGNALS activated."

  logit "Installing cronjob..."
  <!--# Add cronjob for Disk Location -->
  cat &gt;&pluginLOC;-&branch;/disklocation.cron &lt;&lt;EOL
# Crontab for Disk Location plugin to retrieve SMART data, power status and run backup in the background.
56 */12 * * * php -f &emhttpLOC;/pages/cronjob.php start silent &amp;&gt; /dev/null
*/5 * * * * php -f &emhttpLOC;/pages/cronjob.php start status silent &amp;&gt; /dev/null
*/5 * * * * php -f &emhttpLOC;/pages/cronjob.php start syslogread silent &amp;&gt; /dev/null
0 0 * * * php -f &emhttpLOC;/pages/page_system.php backup auto silent &amp;&gt; /dev/null
0 5 1 * * php -f &emhttpLOC;/pages/benchmark.php auto silent &amp;&gt; /dev/null
EOL

  php -f &emhttpLOC;/pages/cronjob.php start status
  chmod +x &pluginLOC;-&branch;/disklocation.cron

  <!--# Consider if this is an installation or newly booted server. If the system has been running for less than 15 minutes, run cronjob to gather SMART data. @reboot cron does not work on Unraid.-->
  UPTIME_DATE=`uptime -s`
  UPTIME_UNIX=`date --date "$UPTIME_DATE" +%s`
  UPTIME_SEC=$((`date +%s` - $UPTIME_UNIX))
  if [ $UPTIME_SEC -lt 900 ]; then
    logit "System newly booted, gathering SMART data"
    php -f &emhttpLOC;/pages/cronjob.php install
  else
    logit "Uptime is above 15 minutes: Force SMART must be started manually unless the files already exists."
  fi
  
  <!--# Update installed cronjob -->
  /usr/local/sbin/update_cron
  
  logit "Plugin installed successfully!"
  exit 0
else
  <!-- Revert back to previous packages -->
  if [ -f "&pluginLOC;/&packagefile;" ] ; then
    <!-- Remove bad SHA256 downloaded package if exists -->
    rm -f "&pluginLOC;/&packagefile;"
  fi
  logit "Reverting back to previously saved packages..."
  TEMP1="/tmp/&name;-packages"
  TEMP2=$(ls $TEMP1)
  if [ "$TEMP2" != "" ] ; then
    OLDTEMP="/tmp/&name;-packages/&name;.*.tar.bz2"
    TEMP="/tmp/&name;-packages/&name;.*.zip"
    mv -f $OLDTEMP "&pluginLOC;"
    mv -f $TEMP "&pluginLOC;"
    logit "Previous packages restored"
  else
    logit "No previous packages to restored"
  fi
  rm -Rf "/tmp/&name;-packages"
  rm -f "/tmp/&name;-install"
  logit "Plugin install failed"
  exit 1
fi
</INLINE>
</FILE>

<!--
############################################
# plugin Remove method
############################################
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
logit()
{
  <!--logger -trc.&name; -plocal7.info -is "$1"-->
  echo "$1"
  echo ""
}

if [[ -f "/tmp/disklocation/db.lock" ]]; then
  logit "Existing cronjob is running in the background, retrying every 5 seconds until it finish..."
  while [ -f "/tmp/disklocation/db.lock" ];
  do
    sleep 5
    logit "retrying..."
  done
  logit "Done. Continuing plugin removal..."
fi

logit "Removing plugin..."
[ -f "/tmp/&name;-install" ] &amp;&amp; rm -f "/tmp/&name;-install"
[ -d "&emhttpLOC;" ] &amp;&amp; rm -fR "&emhttpLOC;"
[ -f "/usr/local/bin/smartlocate" ] &amp;&amp; rm -f "/usr/local/bin/smartlocate"
[ -f "/etc/cron.hourly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.hourly/disklocation.sh"
[ -f "/etc/cron.daily/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.daily/disklocation.sh"
[ -f "/etc/cron.weekly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.weekly/disklocation.sh"
[ -f "/etc/cron.monthly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.monthly/disklocation.sh"
[ -f "&pluginLOC;/disklocation.noscan" ] &amp;&amp; rm -f "&pluginLOC;/disklocation.noscan"
[ -d "/tmp/disklocation" ] &amp;&amp; rm -rf "/tmp/disklocation"
[ -f "&pluginLOC;-&branch;/powermode.cron" ] &amp;&amp; rm -f "&pluginLOC;-&branch;/powermode.cron"
[ -f "&pluginLOC;-&branch;/disklocation.cron" ] &amp;&amp; rm -f "&pluginLOC;-&branch;/disklocation.cron"
[ -d "&pluginLOC;-&branch;" ] &amp;&amp; rmdir "&pluginLOC;-&branch;"
/usr/local/sbin/update_cron
rm -f &pluginLOC;/disklocation.*.tar.bz2
rm -f &pluginLOC;/disklocation.*.zip
logit "Plugin stopped and removed, package files removed from &pluginLOC;, database, settings and the backups are not removed."
</INLINE>
</FILE>
</PLUGIN>
