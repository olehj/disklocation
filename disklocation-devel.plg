<?xml version='1.0' standalone='yes'?>

<!DOCTYPE PLUGIN [
<!ENTITY name             "disklocation">
<!ENTITY author           "Ole-Henrik Jakobsen">
<!ENTITY version          "2025.01.30-1812">
<!ENTITY launch           "Tools/&name;">
<!ENTITY branch           "devel">
<!ENTITY packageURL       "https://github.com/olehj/disklocation/archive/&branch;.zip">
<!ENTITY pluginURL        "https://raw.githubusercontent.com/olehj/&name;/&branch;/&name;-&branch;.plg">
<!ENTITY packagefile      "&name;.&version;.zip">
<!ENTITY pluginLOC        "/boot/config/plugins/&name;">
<!ENTITY emplugLOC        "/usr/local/emhttp/plugins">
<!ENTITY emhttpLOC        "&emplugLOC;/&name;">
<!ENTITY pluginsupportURL "https://forums.unraid.net/topic/77302-plugin-disk-location/">
]>

<PLUGIN  name="&name;-devel"
         author="&author;"
         version="&version;"
         launch="&launch;"
         pluginURL="&pluginURL;"
         icon="server"
         support="&pluginsupportURL;"
>

<!--
    Copyright 2019-2025, Ole-Henrik Jakobsen

    This file is part of Disk Location for Unraid.

    Disk Location for Unraid is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Disk Location for Unraid is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Disk Location for Unraid.  If not, see <https://www.gnu.org/licenses/>.
-->
  
<CHANGES>
###Development releases
 - This package includes unstable development branch and should only be used for testing or instructed to do so.
 - New versioning for devel branch will include hour and minute (YYYY.MM.DD-HHmm) from now on.
 
###Change Log
 - The change log will be found in the "master" branch file:
 --- https://github.com/olehj/disklocation/blob/devel/disklocation-master.plg
</CHANGES>

<!--
############################################
# Plugin Install script
############################################
-->
<FILE Name="/tmp/&name;-install" Run="/bin/bash">
<INLINE>
<!--
#################
# L O G I T
#################
-->
logit()
{
  <!--logger -trc.&name; -plocal7.info -is "$1"-->
  echo ""
  echo "$1"
}

DOWNLOAD_PKG="false"
INSTALL_PKG="false"

if [[ -f "/tmp/disklocation/db.lock" ]]; then
  logit "Existing cronjob is running in the background, retrying every 5 seconds until it finish..."
  while [ -f "/tmp/disklocation/db.lock" ];
  do
    sleep 5
    logit "retrying..."
  done
  logit "Done. Continuing plugin installation..."
fi

logit "Removing old plugin data before installing, if they exists..."
[ -d "&emhttpLOC;" ] &amp;&amp; rm -fR "&emhttpLOC;"
[ -f "/usr/local/bin/smartlocate" ] &amp;&amp; rm -f "/usr/local/bin/smartlocate"
[ -f "/tmp/disklocation/db.lock" ] &amp;&amp; rm -f "/tmp/disklocation/db.lock"
[ -f "/etc/cron.hourly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.hourly/disklocation.sh"
[ -f "/etc/cron.daily/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.daily/disklocation.sh"
[ -f "/etc/cron.weekly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.weekly/disklocation.sh"
[ -f "/etc/cron.monthly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.monthly/disklocation.sh"
[ -f "/etc/cron.monthly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.monthly/disklocation.sh"
[ -f "&pluginLOC;/disklocation.noscan" ] &amp;&amp; rm -f "&pluginLOC;/disklocation.noscan"
[ -f "&pluginLOC;-&branch;/powermode.cron" ] &amp;&amp; rm -f "&pluginLOC;-&branch;/powermode.cron"

logit "Installing plugin..."

<!--# Create plugin folder if needed -->
if [ ! -d "&pluginLOC;" ] ; then
  logit "Creating plugin folder &pluginLOC;"
  mkdir -p "&pluginLOC;"
else
  logit "Plugin folder &pluginLOC; already exists"
fi

<!--# Create plugin-branch folder if needed -->
if [ ! -d "&pluginLOC;-&branch;" ] ; then
  logit "Creating plugin folder &pluginLOC;-&branch;"
  mkdir -p "&pluginLOC;-&branch;"
else
  logit "Plugin folder &pluginLOC;-&branch; already exists"
fi

<!--# Check local package file -->
logit "Checking existing package &pluginLOC;/&packagefile;..."
if [ -f "&pluginLOC;/&packagefile;" ] ; then
  INSTALL_PKG="true"
else
  logit "Latest package does not exist &pluginLOC;/&packagefile;"
  DOWNLOAD_PKG="true"
fi

<!--# Download plugin files -->
if [ "$DOWNLOAD_PKG" == "true" ]; then

  <!--# Save existing packages until new package is downloaded OK -->
  logit "Saving any previous packages from &pluginLOC;"
  mkdir -p "/tmp/&name;-packages"
  TEMPOLD="&pluginLOC;/&name;.*.tar.bz2"
  TEMP="&pluginLOC;/&name;.*.zip"
  mv -f $TEMPOLD $TEMP "/tmp/&name;-packages/"

  logit "Attempting to download plugin package &packageURL;..."
  wget -O &pluginLOC;/&packagefile; --quiet --no-check-certificate --timeout=30 &packageURL;
  if [ ! $? == "0" ] ; then
    logit "Package server down &packageURL; - Plugin cannot install"
    INSTALL_PKG="false"
  else
    if [ ! -f "&pluginLOC;/&packagefile;" ] ; then
      logit "Package download failed &packageURL; - Plugin cannot install"
      INSTALL_PKG="false"
    else
      logit "Package &packagefile; downloaded to &pluginLOC;"
      INSTALL_PKG="true"
    fi
  fi
fi

if [ "$INSTALL_PKG" == "true" ] ; then
  logit "Extracting plugin package..."
  <!--# Remove current existing files -->
  [ -d "&emhttpLOC;" ] &amp;&amp; rm -fR "&emhttpLOC;"
  <!--# Extract files and move correct directory -->
  unzip "&pluginLOC;/&packagefile;" -d /tmp/&name;-packages/
  mv "/tmp/&name;-packages/&name;-&branch;/&name;" "&emplugLOC;/"
  <!--tar -jxf "&pluginLOC;/&packagefile;" -C "&emplugLOC;"-->
  <!--# Edit PAGE file  - Dynamically add version number -->
  if [ -f "&emhttpLOC;/&name;.page" ] ; then
    echo "Version=\"&version;\"" &gt;&gt; "&emhttpLOC;/&name;.page"
    logit "Extraction done."
    EXTRACT_PKG="true"
  else
    logit "Extraction failed."
    EXTRACT_PKG="false"
  fi
fi

if [ "$EXTRACT_PKG" == "true" ] ; then
  logit "Installing files..."
  <!--# Add locate bash script -->
  cat &gt;/usr/local/bin/smartlocate &lt;&lt;EOL
#!/bin/bash

# Simple hack to locate harddrives in hotswap arrays,
#   might not work on all drives or SSD's.
#
# Run: ./smartlocate [address]
#  Ex: ./smartlocate 8:0:0:0
#
# Check addresses available: ls -l /dev/bsg/
#
# Script needs to be interrupted: [CTRL]+[C]
#   or killed: pkill -f smartlocate
#
# Made by &author; &lt;ole@gidderikke.no&gt;

while sleep 0.5; do
  pkill -f smartctl &amp;&gt; /dev/null
  smartctl -x /dev/bsg/\&#36;1 &amp;&gt; /dev/null
done
EOL
  chmod +x /usr/local/bin/smartlocate
  rm -Rf "/tmp/&name;-packages"
  rm -f "/tmp/&name;-install"
  
  php -f &emhttpLOC;/pages/page_system.php backup auto

logit "Configuring..."
# Get sub-configuration
  if [ -f "&pluginLOC;/disklocation.conf" ]; then
    DISKLOCATION_CSS_SIGNALS=($(jq -re '.signal_css // empty' &pluginLOC;/disklocation.conf))
  fi
  
  if [ -f "&pluginLOC;/settings.json" ]; then
    DISKLOCATION_CSS_SIGNALS=($(jq -re '.signal_css // empty' &pluginLOC;/settings.json))
  fi

# Stylesheet configuration
  if [ -z $DISKLOCATION_CSS_SIGNALS ]; then
    DISKLOCATION_CSS_SIGNALS="signals.dynamic.css"
  fi

  ln -s &emhttpLOC;/pages/styles/$DISKLOCATION_CSS_SIGNALS &emhttpLOC;/pages/styles/signals.css
  logit "SIGNALS: $DISKLOCATION_CSS_SIGNALS activated."

  logit "Installing cronjob..."
  <!--# Add cronjob for Disk Location -->
  cat &gt;&pluginLOC;-&branch;/disklocation.cron &lt;&lt;EOL
# Crontab for Disk Location plugin to retrieve SMART data, power status and run backup in the background.
@reboot php -f &emhttpLOC;/pages/cronjob.php cronjob silent &amp;&gt; /dev/null
56 */12 * * * php -f &emhttpLOC;/pages/cronjob.php cronjob silent &amp;&gt; /dev/null
*/5 * * * * php -f &emhttpLOC;/pages/cronjob.php cronjob status &amp;&gt; /dev/null
0 0 * * * php -f &emhttpLOC;/pages/page_system.php backup auto silent &amp;&gt; /dev/null
0 5 1 * * php -f &emhttpLOC;/pages/benchmark.php auto silent &amp;&gt; /dev/null
EOL

  php -f &emhttpLOC;/pages/cronjob.php cronjob status
  chmod +x &pluginLOC;-&branch;/disklocation.cron
  /usr/local/sbin/update_cron
  
  logit "Plugin installed successfully!"
  exit 0
else
  <!-- Revert back to previous packages -->
  if [ -f "&pluginLOC;/&packagefile;" ] ; then
    <!-- Remove bad SHA256 downloaded package if exists -->
    rm -f "&pluginLOC;/&packagefile;"
  fi
  logit "Reverting back to previously saved packages..."
  TEMP1="/tmp/&name;-packages"
  TEMP2=$(ls $TEMP1)
  if [ "$TEMP2" != "" ] ; then
    OLDTEMP="/tmp/&name;-packages/&name;.*.tar.bz2"
    TEMP="/tmp/&name;-packages/&name;.*.zip"
    mv -f $OLDTEMP "&pluginLOC;"
    mv -f $TEMP "&pluginLOC;"
    logit "Previous packages restored"
  else
    logit "No previous packages to restored"
  fi
  rm -Rf "/tmp/&name;-packages"
  rm -f "/tmp/&name;-install"
  logit "Plugin install failed"
  exit 1
fi
</INLINE>
</FILE>

<!--
############################################
# plugin Remove method
############################################
-->
<FILE Run="/bin/bash" Method="remove">
<INLINE>
logit()
{
  <!--logger -trc.&name; -plocal7.info -is "$1"-->
  echo "$1"
  echo ""
}

if [[ -f "/tmp/disklocation/db.lock" ]]; then
  logit "Existing cronjob is running in the background, retrying every 5 seconds until it finish..."
  while [ -f "/tmp/disklocation/db.lock" ];
  do
    sleep 5
    logit "retrying..."
  done
  logit "Done. Continuing plugin removal..."
fi

logit "Removing plugin..."
[ -f "/tmp/&name;-install" ] &amp;&amp; rm -f "/tmp/&name;-install"
[ -d "&emhttpLOC;" ] &amp;&amp; rm -fR "&emhttpLOC;"
[ -f "/usr/local/bin/smartlocate" ] &amp;&amp; rm -f "/usr/local/bin/smartlocate"
[ -f "/etc/cron.hourly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.hourly/disklocation.sh"
[ -f "/etc/cron.daily/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.daily/disklocation.sh"
[ -f "/etc/cron.weekly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.weekly/disklocation.sh"
[ -f "/etc/cron.monthly/disklocation.sh" ] &amp;&amp; rm -f "/etc/cron.monthly/disklocation.sh"
[ -f "&pluginLOC;/disklocation.noscan" ] &amp;&amp; rm -f "&pluginLOC;/disklocation.noscan"
[ -d "/tmp/disklocation" ] &amp;&amp; rm -rf "/tmp/disklocation"
[ -f "&pluginLOC;-&branch;/powermode.cron" ] &amp;&amp; rm -f "&pluginLOC;-&branch;/powermode.cron"
[ -f "&pluginLOC;-&branch;/disklocation.cron" ] &amp;&amp; rm -f "&pluginLOC;-&branch;/disklocation.cron"
/usr/local/sbin/update_cron
rm -f &pluginLOC;/disklocation.*.tar.bz2
rm -f &pluginLOC;/disklocation.*.zip
logit "Plugin stopped and removed, package files removed from &pluginLOC;, database, settings and the backups are not removed."
</INLINE>
</FILE>
</PLUGIN>
